#!/usr/bin/perl -w

use strict "vars";
#--------------------------------------------------------------------------------------------------
my $TPTPDirectory = "/home/tptp";

if (exists($ENV{TPTP_HOME})) {
    $TPTPDirectory = $ENV{TPTP_HOME};
}
if (! exists($ENV{TPTP})) {
    $ENV{TPTP} = "$TPTPDirectory/TPTP";
}
if (! -d $ENV{TPTP}) {
    die("ERROR: Cannot find TPTP directory\n");
}

my $TPTP4X = "$TPTPDirectory/ServiceTools/tptp4X";
my $TryToProve = "$TPTPDirectory/ServiceTools/TryToProve";

#----Global for use in END statements
my $GlobalTemporaryDirectory = "/tmp/GCMV_$$";
my $TypesFile;   #----Set below
my $ModelAsAxiomsFile;   #----Set below
my $ProblemAsAxiomsFile;   #----Set below
my $ProblemAndModelAsAxiomsFile;   #----Set below
my $GlobalInterrupted = 0;
my %GlobalOptions;

my $DefaultProver = "Vampire---";
my $DefaultModelFinder = "Vampire-SAT---";
my $DefaultCPULimit = 10;
#--------------------------------------------------------------------------------------------------
DoMain();
#--------------------------------------------------------------------------------------------------
sub DoMain {

    %GlobalOptions = (
          "-q" => 1,          #----Quietness
          "-t" => $DefaultCPULimit,
          "-f" => 1,          #----Continue on failure to show SAT or UNS
          "-p" => $DefaultProver,          #----Use prover
          "-m" => $DefaultModelFinder,     #----Use model finder
          "-k" => undef,        #----Don't keep temporary files
       );
    my $Key;

    my $ModelFile;
    my $ProblemFile;
    my $Result;
    my $Output;
    my $NumberOfProblemFormulaeToVerify;
    my $CPULimitPerProblemFormula;

#----Send QUIT signals to the right place
    $SIG{'QUIT'} = 'QUITHandler';
    $SIG{'XCPU'} = 'QUITHandler';
    $SIG{'INT'}  = 'QUITHandler';
    $SIG{'ALRM'} = 'QUITHandler';

#----Send STDERR to STDOUT
    close(STDERR);
    open(STDERR,">&STDOUT");
#----Flush output
    $| = 1;

#----Extract command line arguments
    while (scalar(@ARGV) >= 2 && $ARGV[0] =~/-[a-z]/) {
        $Key = shift(@ARGV);
        if (length($Key) == 2) {
            if (defined($ARGV[0])) {
                $GlobalOptions{$Key} = shift(@ARGV);
            } else {
                Usage();
            }
        } else {
            $GlobalOptions{substr($Key,0,2)} = substr($Key,2);
        }
    }

    if (defined($GlobalOptions{'-k'})) {
        $GlobalTemporaryDirectory = $GlobalOptions{'-k'};
    } 
    system("mkdir -p $GlobalTemporaryDirectory");
    $TypesFile = "$GlobalTemporaryDirectory/TypesFile.ax";
    $ModelAsAxiomsFile = "$GlobalTemporaryDirectory/ModelAsAxiom.ax";
    $ProblemAsAxiomsFile = "$GlobalTemporaryDirectory/ProblemAsAxioms.ax";
    $ProblemAndModelAsAxiomsFile = "$GlobalTemporaryDirectory/ProblemAndModelAsAxiomsFile.ax";
    END {
        if (!defined($GlobalOptions{'-k'})) {
            system("rm -rf $GlobalTemporaryDirectory");
        }
    }

#----Command line is model file, problem file
    if (scalar(@ARGV) < 2 || ! -f ($ProblemFile = $ARGV[0]) || ! -f ($ModelFile = $ARGV[1])) {
        Usage();
        die("\n");
    }

#----Convert the interpretation formula in model file to axiom. First save the type declarations
    system("$TPTP4X -x -c -u machine $ModelFile | grep ',type,' > $TypesFile");
#----Second convert all model formulae to axioms. This does saturations too, which was not part of
#----the original plan. Check emails with Joe.
    QuietPrint("% Testing model status",1);
    system("cp $TypesFile $ModelAsAxiomsFile");
    system("$TPTP4X -x -c -u machine -f tptp:short $ModelFile | grep -v ',type,' | sed -e 's/^tcf/tff/' -e 's/^\\([^,]*\\),[^,]*,\\(.*\\)/\\1,axiom,\\2/' >> $ModelAsAxiomsFile");
    ($Result) = TryToProve($ModelAsAxiomsFile,undef,
# 'fof(prove_false,conjecture,$false).',
"0",$GlobalOptions{'-m'},$GlobalOptions{'-t'});
    QuietPrint("% Model is $Result",1);
#----Check that the model is consistent with the problem formulae. Convert problem formulae to
#----axiom, with conjecture negated. They are individually made into conjectures for verification
#----in TryToProve.
    if (($Result eq "Unknown" && $GlobalOptions{'-f'}) || $Result eq "Satisfiable") {
        QuietPrint("% Testing problem with model status",0);
        system("$TPTP4X -x -c -u machine -f tptp:short $ProblemFile | grep -v ',type,' | sed -e '/,conjecture,/s/^\\([^,]*\\),[^,]*,\\(.*\\))\./\\1,negated_conjecture,~(\\2))./' -e 's/^\\([^,]*\\),[^,]*,\\(.*\\)/\\1,axiom,\\2/' > $ProblemAsAxiomsFile");
        system("cat $TypesFile $ProblemAsAxiomsFile $ModelAsAxiomsFile > $ProblemAndModelAsAxiomsFile");
        ($Result) = TryToProve($ProblemAndModelAsAxiomsFile,undef,"0",$GlobalOptions{'-m'},
$GlobalOptions{'-t'});
        QuietPrint("% Problem with model is $Result",1);
    }
    if (($Result eq "Unknown" && $GlobalOptions{'-f'}) || $Result eq "Satisfiable") {
        $NumberOfProblemFormulaeToVerify = `grep -c -E '^(cnf|fof|tff|thf)' $ProblemFile` -
`grep -c ', *type *,' $ProblemFile`;
        chomp($NumberOfProblemFormulaeToVerify);
        $CPULimitPerProblemFormula = int($GlobalOptions{'-t'} * 2 /
$NumberOfProblemFormulaeToVerify);
        ($Result) = VerifyModel($ModelAsAxiomsFile,$ProblemAsAxiomsFile,$GlobalOptions{'-p'},
$GlobalOptions{'-m'},$CPULimitPerProblemFormula);
    }
    print("% SZS status $Result for $ModelFile models $ProblemFile\n");
}
#--------------------------------------------------------------------------------------------------
sub Usage {

    print("
Usage 
    GCMV [-qN] [-f0/1] [-tN] [-p prover] [-m model_finder] [-k dir] problem_file model_file
");
}
#--------------------------------------------------------------------------------------------------
sub QUITHandler {
    my ($Signal) = @_;

    $GlobalInterrupted = 1;

    if ($Signal eq 'INT' || $Signal eq 'QUIT') {
        die("Terminated by ^C\n");
    }
}
#--------------------------------------------------------------------------------------------------
sub VerifyModel {
    my ($ModelAsAxiomsFile,$ProblemFile,$Prover,$ModelFinder,$CPULimit) = @_;

    my $ProblemFormula;
    my $ProblemFormulaName;
    my $Result;
    my $AllResult;

#----Don't verify type formulae
    open(PROBLEM,"$TPTP4X -x -c -u machine $ProblemFile | grep -v ', *type *,' |") || 
die("ERROR, Cannot open $ProblemFile\n");
#----For each line (formula) in the problem
    $AllResult = "Verified";
    while (!$GlobalInterrupted && defined($ProblemFormula = <PROBLEM>)) {
        chomp($ProblemFormula);
        ($ProblemFormulaName) = ($ProblemFormula =~ /^...\(([^,]*),/);
        QuietPrint("% Verifying $ProblemFormulaName",1);
        ($Result) = TryToProve("$ModelAsAxiomsFile",$ProblemFormula,$Prover,$ModelFinder,$CPULimit);
        QuietPrint("% Proving result for $ProblemFormulaName is $Result",0);
        if ($Result eq "Theorem") {
            QuietPrint("% Verified $ProblemFormulaName",1);
        } else {
            QuietPrint("% Not verified $ProblemFormulaName",1);
            $AllResult = "NotVerified";
#----If failure, continue only if requested
            if (! $GlobalOptions{'-f'}) {
                close(PROBLEM);
                return($AllResult);
            }
        }
    }
    close(PROBLEM);
    if ($GlobalInterrupted) {
        $AllResult = "Unknown";
    }
    return($AllResult);
}
#--------------------------------------------------------------------------------------------------
sub TryToProve {
    my ($AxiomsFile,$Conjecture,$Prover,$ModelFinder,$CPULimit) = @_;

    my $TryToProveCommand;
    my $TryingLine;
    my $Result;

    $TryToProveCommand = "$TryToProve -q0 -n1 -t $CPULimit";
    if (defined($Prover)) {
        $TryToProveCommand .= " -p $Prover";
    }
    if (defined($ModelFinder)) {
        $TryToProveCommand .= " -m $ModelFinder ";
    }
    if (defined($GlobalOptions{'-k'})) {
        $TryToProveCommand .= " -k $GlobalOptions{'-k'}";
    }
    $TryToProveCommand .= " $AxiomsFile";
    if (defined($Conjecture)) {
        $TryToProveCommand .= " '$Conjecture'";
    }
    $Result = "Unknown";
    open(TRYTOPROVE,"$TryToProveCommand |") || die("ERROR: Cannot start $TryToProveCommand\n");
    while (defined($TryingLine = <TRYTOPROVE>) && $Result eq "Unknown") {
        chomp($TryingLine);
#DEBUG print("$TryingLine\n");
        QuietPrint("% $TryingLine",0);
        if ($Result eq "Unknown" && $TryingLine =~ /SZS status/) {
            ($Result) = ($TryingLine =~ / SZS status ([^ ]*)/);
        } 
    }
    close(TRYTOPROVE);
    return($Result);
}
#--------------------------------------------------------------------------------------------------
sub QuietPrint {
    my ($Message,$MaxQuietness) = @_;

    if ($GlobalOptions{'-q'} <= $MaxQuietness) {
        print("$Message\n");
    }
}
#--------------------------------------------------------------------------------------------------
